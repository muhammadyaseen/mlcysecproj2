from torch.utils.data import Dataset
import pandas as pd
import os 
import torch 

CLASSES = ["NothingFound", "Basun", "Agent", "Allaple", "AutoIt", 
           "Patched", "Swizzor", "Texel", "VB", "Virut"]

class MalwareDataset(Dataset):
    def __init__(self, root_dir, dataset_type="train", transform=None):
            
        assert dataset_type in ["train","test"] 
        db_path = os.path.join(root_dir, dataset_type + ".csv")
        self.dataset_type = dataset_type
        self.malware_db = pd.read_csv(db_path)
        self.root_dir = root_dir
        self.transform = transform
        # TODO: put CLASSES variable inside self.
        self.num_classes = len(CLASSES)

    def __len__(self):
        
        return len(self.malware_db)

    def __getitem__(self, index):
        
        if torch.is_tensor(index):
            index = index.tolist()
        
        # get the file name for this index
        mw_filename = self.malware_db.iloc[index,0] + "." + self.malware_db.iloc[index,1] 
        
        # load and clean the data

        # set the corresponding location to 1
        label = [0]*len(CLASSES) 
        readable_label = self.malware_db.iloc[index,1]
        label[self.get_class_index(readable_label)] = 1
        label_idx = self.get_class_index(readable_label)
        
        contents = open(os.path.join(self.root_dir, self.dataset_type, mw_filename)).readlines()
        contents_sanitized = [l.replace(' |',' ').strip(' \n')  for l in contents if not '#' in l]
        sample = {'trace': contents_sanitized, 'label': label, 'readable_label': readable_label,
                  'label_idx': label_idx}

        if self.transform:
            sample = self.transform(sample)

        return sample

    def get_class_index(self, label):
        
        """
        Just a simple way to vectorize the output labels using one-hot 
        encoding at the load time
        """
        assert label in CLASSES
        return CLASSES.index(label)
