from sklearn.preprocessing import OneHotEncoder
import numpy as np


"""
Some helpful data transformations for the MIST-format
"""

class CategoryOperationTransform(object):
    """
    This transform just returns the category and operation part of the trace as feature.
    It is useful for making the baseline model.
    """

    def __init__(self):
        self.num_feats = None

    def __call__(self, sample):
        
        # get all the cat/ops identifiers, they are in position 0 and 1 
        # in each command

        cat_ops_list = []

        for cmd in sample['trace']:
            
            cmd_parts = cmd.split(' ') 
            cat, op = cmd_parts[0], cmd_parts[1]

            cat_ops_list.append( (cat, op) )

        return { 'trace': cat_ops_list, 'label': sample['label'],'readable_label': sample['readable_label'] }


class CategoryCount(object):
    """
    This also only takes into account the category and operation part of the trace as a feature.
    Then, it uses one-hot encoding to represent how many rows got the same feature. Lastly, it sums
    along the 'line' dimension to get a vector.
    """
    def __init__(self, debug=False):
        self.num_categories = 20
        self.max_sys_call = 15
        self.num_feats = self.num_categories + self.max_sys_call # 20 category of system calls, and
        # 15 is the maximum number of system calls
        # self.encoder = OneHotEncoder('')
        self.debug = debug

    def __call__(self, sample):
        """
        Args:
            sample (dict): a sample dictionary containing 'trace', 'readable_label', and 'label' as keys.

        Returns:
            transformed_sample (dict)
        """

        trace = sample['trace']

        out = np.zeros(shape=(len(trace), self.num_feats))
        for i, cmd in enumerate(trace):
            cmd_parsed = cmd.split(' ')
            category = int(cmd_parsed[0], 16)
            sys_call = int(cmd_parsed[1], 16)

            try:
                out[i, category] = 1.
                out[i, 20 + sys_call] = 1.
            except:
                print("category: {}, 20+sys_call: {}, category hex".format(category, 20 + sys_call))

        # only replacing the old list of strings with transformed vector.
        sample['trace'] = np.sum(out, axis=0).astype(np.float32) # sum over the commands to get a vector.
        return sample


class FirstKArgs(object):
    """
    This transformer takes into account the first two columns (as previously), plus the first K 
    argument colummns after the first two. The rationale is that, according to MIST documentation,
    earlier arguments are more important and significant than later ones (since later ones provide
    very thin details.)
    """

    def __init__(self, K=5):
        self.K = K
        self.num_categories = 20
        self.max_sys_call = 14
        self.num_feats = None # decide this.

    def __call__(self, sample):
        pass

    def prepare_tokens(self, data):
        pass